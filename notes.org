* General goal
  Define a model for the simply typed lambda calculus equipped with a recursion operator, in Coq


* High level design choices
  The development should be /effective/.
  
  This takes two meanings. 
  First, the meta-logic itself should be effective, i.e. we
  restrict ourself to the vanilla, constructivist, CIC.
  Second, we define effective constructions in our domain theory.

  
* Mathematical material covered

** Elementary category theory
   To discuss whether we shy away from it or not.

** CPOs
** Algebraic domains and their bases
   
   A particular case of CPOs, where all elements is the supremum of its set of
   compact, way-below elements.
   Algebraic domains are (preorder)-isomorphic to their set of compact elements,
   referred to as bases.

** Plotkin orders

** Powerdomains

** Recursive Domain Equations


* Interesting technical points

** Introduction 
   -> Effectiveness
*** Recursive function theory for free
    Developping an effective theory means that we can inherit Coq's support for recursive functions
** Preorder vs Partial Order (Yannick)
  
   -> Deriving a partial order from preorder
 
   This kind of theory is usually built upon partial orders. However, in order to
   leverage Coq's /setoid rewrite/ facility, we work over preorder instead.

*** Explanations
    
    A /preorder/ is a type equipped with a reflexive, transitive relation (i.e.
    not necessarily symmetric, in contrast with the case of /partial orders/).
    
    The rational is to be able to naturally derive a /setoid/, i.e. a type
    equipped with an equivalence relation. Setoids are interesting when working
    with Coq: they are well-supported to facilitate rewrites of their underlying
    relation. The mathematical usual pendant, quotients, are not natively
    supported.

    Remains to address two things: one, the relation between preoders and setoids;
    two, how to recover the partial order that we really are concerned with.

    Given a preoder, we can easily derive a setoid: two elements are equivalent
    if they are smaller one from another. We then make sure to identify such
    elements in the remaining of the development (see setoïd rewrite).

    However, now that we have identified these equivalent elements, we get 
    back antisymmetry, and hence a partial order.

*** Effective preorder

    A preorder is said to be effective if it comes with an enumerable set
    containing its carrier, as well as a decision procedure for its order.

** Finite sets (Yannick)

   Finite sets are simply represented as lists here, i.e. so-called enumerated
   sets according to Coquand/Spiwack:
   http://assert-false.net/arnaud/papers/Constructively%20Finite.pdf
  
   Interesting note on this paper: shows that the notion of finite set is
   non-trivial in constructive mathematics. Several equivalent classic
   caracterisations are non-equivalent, see also
   https://platyblog.github.io/post/streamless/

   Advantage of enumerated sets: very strong notion of finiteness. In particular,
   it is decidable whether they are inhabited!

   Here however we once again work up to equivalence:
   x ∈ l ::= ∃ x', In x' l ∧ x' ≈ x
   Is it still decidable? Do we care?

** Coinductive vs Enumerable Sets (Yao)

   Enumerable sets are defined as partial functions from nat, i.e. /nat -> option A/.
   Note that classical finite sets are included in these enuremable sets. However,
   given an enumerable set, it is not decidable whether it has a finite number of 
   elements.
  
   Intuition: enumerable sets correspond to the recursively enumerable sets.

   The whole development works exclusively over these enumerable sets, which
   is instrumental in achieving effectiveness.
** Canonical structures vs Type classes vs Modules (Yao)
   Dockins uses canonical structures. Could be interesting to cover these notions.
   Related: use of coercions
 
** Algebraic domains (Yannick)

** inh_h

   We introduce a trick to unify definitions of pointed and unpointed
   alternatives of constructions.

   A pointed ordered structure is one which admis a least element, as opposed to
   an unpointed one. This distinction applies to CPOs, Scott-continuous
   functions as well as profinite domains.

   The predicate /inh_h/, for /inhabited conditionned by the boolean h/,
   provides a uniform way to capture this notion.
   
   Essentially, each concept will be defined by quantification over all finite
   sets. The difference between being pointed or not will depend on whether or
   not the empty list is considered in this quantification.

   Definitions will therefore be parameterized by a boolean, and quantification
   performed upon conditionally inhabited finite sets:
   /inh_h l ::= (h = false ∨ ∃ x, x ∈ l)/

** Limits: System F
   Type polymorphism cannot be detoned with this material. Why? What would be needed?
** Recursive domain equation

* Current major questions

** TODO Plotkin order
   How does it compare to CPOs? Get a better understanding

** TODO Profinite domain
   Ongoing: see Gunter's thesis, a local product from the 80's
   ftp://ftp.cis.upenn.edu/pub/papers/gunter/th85.pdf.Z

   From the introduction, they are:
   «Let D be a CPO and let M_D be the set of continuous functions p: D → D such that
   p ∘ p ⊑ id_D and the image of p is finite. Then D is said to be /profinite/ if M_D
   is directed and ⊔M_D = id_D.»
   Might have to sleep on this one before fully grasping it.

** TODO Fixpoint resolution
   Last section, to get a better understanding

** DONE Effectiveness
   CLOSED: [2018-04-04 Wed 17:37]
   What does the second notion of effectiveness really means?
   –> Sets manipulated are enumerable, operations defined over them are decidable.
** TODO Limits
   Understanding how to denote additionnal features


* Table of Content: first draft

** Introduction
  
*** Why would domain theory in Coq be interesting to have?
    Basic tool to define a denotational semantic of formal lanugages.
    First step to define denotational-based reasoning tools over these languages.

*** Effectiveness
    A philosophical statement with concrete side-effects

** CPOs
   
   We have seen them a first time, let's see if we can directly write down the Winskell in Coq.
*** How do we represent them?
**** Preorder
**** Enumerable sets
**** inh_h
*** How do we make this work in practice in Coq?
**** Canonical Structures
**** Coercions
**** Setoid rewrites (annoying co-dependency with the choice of preorders)

** Plotkin orders

   Need to get a better understanding to be able to motivate them

** Recursive Domain Equations

   Need to get a better understanding to be able to motivate them

** Domain for lam_rec

   We are able to denote a small language!!
   We can start having fun, operational semantics and proof of equivalence, logical relation

* Table of content: second draft

** Introduction 
   -> Effectiveness
*** Recursive function theory for free
    Developping an effective theory means that we can inherit Coq's support for recursive functions

** Preorder vs Partial Order (Yannick)
  
   -> Deriving a partial order from preorder
 
   This kind of theory is usually built upon partial orders. However, in order to
   leverage Coq's /setoid rewrite/ facility, we work over preorder instead.

*** Explainations
    
    A /preorder/ is a type equipped with a reflexive, transitive relation (i.e.
    not necessarily symmetric, in contrast with the case of /partial orders/).
    
    The rational is to be able to naturally derive a /setoid/, i.e. a type
    equipped with an equivalence relation. Setoids are interesting when working
    with Coq: they are well-supported to facilitate rewrites of their underlying
    relation. The mathematical usual pendant, quotients, are not natively
    supported.

    Remains to see two things: one, the relation between preoders and setoids;
    two, how to recover the partial order that we really are concerned with.

    Given a preoder, we can easily derive a setoid: two elements are equivalent
    if they are smaller one from another. We then make sure to identify such
    elements in the remaining of the development (see setoïd rewrite).

    However, now that we have identified these equivalent elements, we get 
    back antisymmetry, and hence a partial order.
    
*** Effective preorder

    A preorder is said to be effective if it comes with an enumerable set
    containing its carrier, as well as a decision procedure for its order.

** Finite sets (Yannick)

   Finite sets are simply represented as lists here, i.e. so-called enumerated
   sets according to Coquand/Spiwack:
   http://assert-false.net/arnaud/papers/Constructively%20Finite.pdf
  
   Interesting note on this paper: shows that the notion of finite set is
   non-trivial in constructive mathematics. Several equivalent classic
   caracterisations are non-equivalent, see also
   https://platyblog.github.io/post/streamless/

   Advantage of enumerated sets: very strong notion of finiteness. In particular,
   it is decidable whether they are inhabited!

   Here however we once again work up to equivalence:
   x ∈ l ::= ∃ x', In x' l ∧ x' ≈ x
   Is it still decidable? Do we care?

** Coinductive vs Enumerable Sets (Yao)

   Enumerable sets are defined as partial functions from nat, i.e. /nat -> option A/.
   Note that classical finite sets are included in these enuremable sets. However,
   given an enumerable set, it is not decidable whether it has a finite number of 
   elements.
  
   Intuition: enumerable sets correspond to the recursively enumerable sets.

   The whole development works exclusively over these enumerable sets, which
   is instrumental in achieving effectiveness.

** Canonical structures vs Type classes vs Modules (Yao)
   Dockins uses canonical structures. Could be interesting to cover these notions.
   Related: use of coercions
 
** Algebraic domains (Yannick)


* References
** Main paper 
*** Formalized, Effective Domain Theory in Coq
    Robert Dockins
    ITP'14
** Canonical structures
*** Canonical Structures for the working Coq user
    Assia Mahboubi, Enrico Tassi
    ITP'13
*** How to make ad hoc proof automation less ad hoc 
    Georges Gonthier, Beta Ziliani, Aleksandar Nanevski, and Derek Dreyer
    ICFP'11
*** https://coq.inria.fr/refman/canonical-structures.html 
